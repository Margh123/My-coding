public class Karp6174 {

	public static void main(String[] args) {
		int temp = 2315; //No scanner this time! // Careful the case of 7677, 1000 => 3 digits in calculation (1)
		setTool.validnum(temp);
		for (int i=0; i<7; i++) { 
			String numst = Integer.toString(temp);
			char[] a = setTool.toArray(numst);
			a = setTool.Desc(a);
			int largest = setTool.toInt(a);
			a = setTool.Asc(a);
			int smallest = setTool.toInt(a);
			temp = largest - smallest;// Where the error arises
			temp = setTool.append(temp); // If you comment this line (1) error will arise.
			System.out.println(temp);
		}
	}

}
class setTool{ //this class is meant to be a collection of similar methods 
	private setTool() {
	}
	static char[] Desc(char[] args) { // Sort elements in descending order
		char temp;
		for (int i = 0; i < args.length; i++) {     
            for (int j = i+1; j < args.length; j++) {     
               if(args[i] < args[j]) {    
                   temp = args[i];    
                   args[i] = args[j];    
                   args[j] = temp;    
               }
            }
		}
		return args;
	}
	static char[] Asc(char[] args) { // Sort elements in ascending order
		char temp;
		for (int i = 0; i < args.length; i++) {     
            for (int j = i+1; j < args.length; j++) {     
               if(args[i] > args[j]) {    
                   temp = args[i];    
                   args[i] = args[j];    
                   args[j] = temp;    
               }
            }
		}
		return args;
	}
	static char[] toArray(String org) { // Put each digit as a char into an array
		char[] ele = new char[org.length()];
		for (int i = 0; i < org.length(); i++) {
			ele[i] = org.charAt(i);
		}
		return ele;
	}
	static int toInt(char[] args) {
		StringBuilder stringb = new StringBuilder();
		for (int i = 0; i < args.length; i++) {
            stringb.append(args[i]);
        }
		String joinedstr3 = stringb.toString();
        int result = Integer.parseInt(joinedstr3);
        return result;
	}
	static boolean validnum(int a) { // Check if a number is a 4 digits number (first digit is non-zero), without all 4 digits are identical.
		if (a >= 1000 && a <= 9999) {// check 4 digits number
			String s = Integer.toString(a);
			char[] arr = setTool.toArray(s);
			if (arr[0]==arr[1] && arr[1]==arr[2] && arr[2]==arr[3]) {
				System.out.print("Invalid number");
				System.exit(0);
				return false;
			}
			return true;
		}
		System.out.print("Invalid number");
		System.exit(0);
		return false;
	}
	static int append(int temp) { // Check if a calculation result in a 3 digits number
		int result = temp;
		if (result == 999) { // Wrong calculation alway gives result 999
			result = 9990;
			return result;
		}
		return result;
	}
}
